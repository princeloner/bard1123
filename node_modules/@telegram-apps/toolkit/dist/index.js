function C(o) {
  return o.replace(/[A-Z]/g, (e) => `-${e.toLowerCase()}`);
}
function b(o) {
  return o.replace(/[A-Z]/g, (e) => `_${e.toLowerCase()}`);
}
function $(o) {
  return Object.entries(o).reduce((e, [t, n]) => (e[b(t)] = n, e), {});
}
function p(o) {
  return o.replace(/_[a-z]/g, (e) => e[1].toUpperCase());
}
function m(o) {
  return Object.entries(o).reduce((e, [t, n]) => (e[p(t)] = n, e), {});
}
function s(o) {
  const e = m(o);
  for (const t in e) {
    const n = e[t];
    n && typeof n == "object" && !(n instanceof Date) && (e[t] = Array.isArray(n) ? n.map(s) : s(n));
  }
  return e;
}
function k(o) {
  return o.replace(/_([a-z])/g, (e, t) => `-${t.toLowerCase()}`);
}
function u(o) {
  return `tapps/${o}`;
}
function y(o, e) {
  sessionStorage.setItem(u(o), JSON.stringify(e));
}
function S(o) {
  const e = sessionStorage.getItem(u(o));
  try {
    return e ? JSON.parse(e) : void 0;
  } catch {
  }
}
function h(...o) {
  const e = o.flat(1);
  return [
    e.push.bind(e),
    () => {
      e.forEach((t) => {
        t();
      });
    }
  ];
}
// @__NO_SIDE_EFFECTS__
function T(o, e) {
  e || (e = {});
  const {
    textColor: t,
    bgColor: n,
    shouldLog: a
  } = e, r = a === void 0 ? !0 : a, l = typeof r == "boolean" ? () => r : r;
  function c(g, d, ...f) {
    if (d || l()) {
      const i = "font-weight:bold;padding:0 5px;border-radius:5px";
      console[g](
        `%c${Intl.DateTimeFormat("en-GB", {
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
          fractionalSecondDigits: 3,
          timeZone: "UTC"
        }).format(/* @__PURE__ */ new Date())}%c / %c${o}`,
        `${i};background-color: lightblue;color:black`,
        "",
        `${i};${t ? `color:${t};` : ""}${n ? `background-color:${n}` : ""}`,
        ...f
      );
    }
  }
  return [c.bind(void 0, "log"), c.bind(void 0, "error")];
}
export {
  C as camelToKebab,
  b as camelToSnake,
  $ as camelToSnakeObjKeys,
  h as createCbCollector,
  T as createLogger,
  s as deepSnakeToCamelObjKeys,
  S as getStorageValue,
  y as setStorageValue,
  p as snakeToCamel,
  m as snakeToCamelObjKeys,
  k as snakeToKebab
};
//# sourceMappingURL=index.js.map
